#isolate feature value from allentown song
variable <- get(feature, allentown)
data <- training.csv %>%
# group together artists
group_by(artist) %>%
# create a summary of values of the feature to compare
summarise(minimum = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), 0.25, na.rm = TRUE) -1.5*(IQR(get(feature), na.rm = TRUE)),
RF = quantile(get(feature), 0.25, na.rm = TRUE) +1.5*IQR(get(feature), na.rm = TRUE),
maximum = max(get(feature)), na.rm = TRUE) %>%
print(maximum)
# create two new rows of range distances
mutate(out.of.range = if_else(is.na(variable) | variable < minimum |
variable > maximum, TRUE, FALSE)) %>%
mutate(unusual = if_else(is.na(variable) |  variable < LF |
variable > RF, TRUE, FALSE)) %>%
rowwise() %>% #apply row by row
mutate(description = if (out.of.range) {"Out of Range"}
else if(unusual){"Unusual"}
else{"Within Range"}, na.rm = TRUE)
newRow <- data %>%
# select(artist,description) %>%
mutate(feature = feature) # %>%
# pivot_wider(values_from = "description", names_from = "artist")
return(newRow)
}
good.columns <- colnames(select_if(training.csv, is.numeric))
saved <- analysis(good.columns[2])
training.csv[good.columns[82]]
analysis(good.columns[82])
processed.data <- good.columns[1:15] %>%
map_dfr(analysis)
#step 2 function
analysis <- function(feature){
#isolate feature value from allentown song
variable <- get(feature, allentown)
data <- training.csv %>%
# group together artists
group_by(artist) %>%
# create a summary of values of the feature to compare
summarise(minimum = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), 0.25, na.rm = TRUE) -1.5*(IQR(get(feature), na.rm = TRUE)),
RF = quantile(get(feature), 0.25, na.rm = TRUE) +1.5*IQR(get(feature), na.rm = TRUE),
maximum = max(get(feature)), na.rm = TRUE) %>%
# create two new rows of range distances
mutate(out.of.range = if_else(is.na(variable) | variable < minimum |
variable > maximum, TRUE, FALSE)) %>%
mutate(unusual = if_else(is.na(variable) |  variable < LF |
variable > RF, TRUE, FALSE)) %>%
rowwise() %>% #apply row by row
mutate(description = if (out.of.range) {"Out of Range"}
else if(unusual){"Unusual"}
else{"Within Range"}, na.rm = TRUE)
newRow <- data %>%
# select(artist,description) %>%
mutate(feature = feature) # %>%
# pivot_wider(values_from = "description", names_from = "artist")
return(newRow)
}
good.columns <- colnames(select_if(training.csv, is.numeric))
saved <- analysis(good.columns[2])
training.csv[good.columns[82]]
analysis(good.columns[82])
processed.data <- good.columns[1:15] %>%
map_dfr(analysis)
View(processed.data)
View(training.csv)
dim(good.columns)
good.columns
processed.data <- good.columns[1:197] %>%
map_dfr(analysis)
#step 2 function
analysis <- function(feature){
#isolate feature value from allentown song
variable <- get(feature, allentown)
data <- training.csv %>%
# group together artists
group_by(artist) %>%
# create a summary of values of the feature to compare
summarise(minimum = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), 0.25, na.rm = TRUE) -1.5*(IQR(get(feature), na.rm = TRUE)),
RF = quantile(get(feature), 0.25, na.rm = TRUE) +1.5*IQR(get(feature), na.rm = TRUE),
maximum = max(get(feature)), na.rm = TRUE) %>%
# create two new rows of range distances
mutate(out.of.range = if_else(is.na(variable) | variable < minimum |
variable > maximum, TRUE, FALSE)) %>%
mutate(unusual = if_else(is.na(variable) |  variable < LF |
variable > RF, TRUE, FALSE)) %>%
rowwise() %>% #apply row by row
mutate(description = if (out.of.range) {"Out of Range"}
else if(unusual){"Unusual"}
else{"Within Range"}, na.rm = TRUE)
newRow <- data %>%
# select(artist,description) %>%
mutate(feature = feature) # %>%
# pivot_wider(values_from = "description", names_from = "artist")
return(newRow)
}
good.columns <- colnames(select_if(training.csv, is.numeric))
good.columns <- good.columns[-82]
processed.data <- good.columns[1:197] %>%
map_dfr(analysis)
processed.data <- good.columns[1:196] %>%
map_dfr(analysis)
View(processed.data)
categorical.columns <- colnames(select_if(training.csv, !is.numeric))
categorical.columns <- colnames(select_if(training.csv, !(is.numeric)))
?is.numeric
is.character()
categorical.columns <- colnames(select_if(training.csv, is.character))
get("chords_scale", training.csv)
count(get("chords_scale", training.csv), "major")
View(allentown)
categorical.columns <- colnames(select_if(training.csv, is.character))
allen.categorical <- colnames(select_if(allentown, is.character))
?select
?grep
dat.pie <- training.csv |>
group_by(artist) |>
summarise(count = length(grep("major",get("chords_scale", training.csv),)))
View(dat.pie)
dat.pie <- training.csv |>
group_by(artist) |>
summarise(count = length(grep("major",get("chords_scale"))))
View(dat.pie)
dat.pie <- training.csv |>
group_by(artist) |>
summarise(count = length(grep("major",get("chords_scale")))) |>
mutate(allen = length(grep("major",get("chords_scale",allentown))) )
get("chords_scale",allentown)
dat.pie <- training.csv |>
group_by(artist) |>
summarise(total = length(get("chords_scale")), count = length(grep("major",get("chords_scale")))) |>
mutate(allen = length(grep("major",get("chords_scale",allentown))) )
#step 2 function
analysis <- function(feature){
#isolate feature value from allentown song
variable <- get(feature, allentown)
data <- training.csv %>%
# group together artists
group_by(artist) %>%
# create a summary of values of the feature to compare
summarise(minimum = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), 0.25, na.rm = TRUE) -1.5*(IQR(get(feature), na.rm = TRUE)),
RF = quantile(get(feature), 0.25, na.rm = TRUE) +1.5*IQR(get(feature), na.rm = TRUE),
maximum = max(get(feature)), na.rm = TRUE) %>%
# create two new rows of range distances
mutate(out.of.range = if_else(is.na(variable) | variable < minimum |
variable > maximum, TRUE, FALSE)) %>%
mutate(unusual = if_else(is.na(variable) |  variable < LF |
variable > RF, TRUE, FALSE)) %>%
rowwise() %>% #apply row by row
mutate(description = if (out.of.range) {"Out of Range"}
else if(unusual){"Unusual"}
else{"Within Range"}, na.rm = TRUE)
newRow <- data %>%
select(artist,description) %>%
mutate(feature = feature)  %>%
pivot_wider(values_from = "description", names_from = "artist")
return(newRow)
}
good.columns <- colnames(select_if(training.csv, is.numeric))
good.columns <- good.columns[-82]
processed.data <- good.columns[1:196] %>%
map_dfr(analysis)
# making side by side bar plots
column.plot <- ggplot(data=processed.data)+
geom_col(aes(x=artist, y = proportion, fill=description),
position = position_dodge(.5)) +
geom_hline(yintercept = 0)+
xlab("Artist")+
ylab("Proportion of features within range")+
ylim(0,1)+
theme_bw()
categorical.columns <- colnames(select_if(training.csv, is.character))
column.plot <- ggplot(data=processed.data)+
geom_col(aes(x=artist, y = proportion, fill=description),
position = position_dodge(.5)) +
geom_hline(yintercept = 0)+
xlab("Artist")+
ylab("Proportion of features within range")+
ylim(0,1)+
theme_bw()
View(column.plot)
ggplot(data=processed.data)+
geom_col(aes(x=artist, y = proportion, fill=description),
position = position_dodge(.5)) +
geom_hline(yintercept = 0)+
xlab("Artist")+
ylab("Proportion of features within range")+
ylim(0,1)+
theme_bw()
print(processed.data[1])
print(processed.data[2])
which(processed.data[2] == "Within Range")
bar.data <- processed.data |>
add_row(column1 = proportion,column2 = length(which(processed.data[2] == "Within Range"))/ length(processed.data[2]),
)
bar.data <- processed.data |>
add_row(column1 = "proportion",column2 = length(which(processed.data[2] == "Within Range"))/ length(processed.data[2]),
)
bar.data <- processed.data |>
add_row(feature = "proportion",`All Get Out` = length(which(processed.data[2] == "Within Range"))/ length(processed.data[2]),
)
bar.data <- processed.data |>
add_row(feature = "proportion",`All Get Out` = length(which(processed.data[2] == "Within Range"))/ length(processed.data[2]),
`Manchester Orchestra` =length(which(processed.data[3] == "Within Range"))/ length(processed.data[3]),
`The Front Bottoms`= as.character(length(which(processed.data[4] == "Within Range"))/ length(processed.data[4])))
bar.data <- processed.data |>
add_row(feature = "proportion",`All Get Out` = as.character(length(which(processed.data[2] == "Within Range"))/ length(processed.data[2])),
`Manchester Orchestra` =length(which(processed.data[3] == "Within Range"))/ length(processed.data[3]),
`The Front Bottoms`= as.character(length(which(processed.data[4] == "Within Range"))/ length(processed.data[4])))
bar.data <- processed.data |>
add_row(feature = "proportion",`All Get Out` = as.character(length(which(processed.data[2] == "Within Range"))/ length(processed.data[2])),
`Manchester Orchestra` = as.character(length(which(processed.data[3] == "Within Range"))/ length(processed.data[3])),
`The Front Bottoms`= as.character(length(which(processed.data[4] == "Within Range"))/ length(processed.data[4])))
View(bar.data)
(length(which(processed.data[2] == "Within Range"))
length(which(processed.data[2] == "Within Range")
length(which(processed.data[2] == "Within Range"))
length(processed.data[2])
processed.data[2]
bar.data <- processed.data |>
add_row(feature = "proportion",`All Get Out` = as.character(length(which(processed.data[2] == "Within Range"))/ length(`All Get Out`)),
`Manchester Orchestra` = as.character(length(which(processed.data[3] == "Within Range"))/ length(processed.data[3])),
`The Front Bottoms`= as.character(length(which(processed.data[4] == "Within Range"))/ length(processed.data[4])))
bar.data <- processed.data |>
add_row(feature = "proportion",`All Get Out` = as.character(length(which(processed.data[2] == "Within Range"))/ length(processed.data$`All Get Out`)),
`Manchester Orchestra` = as.character(length(which(processed.data[3] == "Within Range"))/ length(processed.data[3])),
`The Front Bottoms`= as.character(length(which(processed.data[4] == "Within Range"))/ length(processed.data[4])))
bar.data <- processed.data |>
add_row(feature = "proportion",`All Get Out` = as.character(length(which(processed.data[2] == "Within Range"))/ length(`All Get Out`)),
`Manchester Orchestra` = as.character(length(which(processed.data[3] == "Within Range"))/ length(processed.data[3])),
`The Front Bottoms`= as.character(length(which(processed.data[4] == "Within Range"))/ length(processed.data[4])))
bar.data <- processed.data |>
add_row(feature = "proportion",`All Get Out` = as.character(length(which(processed.data$`All Get Out` == "Within Range"))/ length(processed.data$`All Get Out`)),
`Manchester Orchestra` = as.character(length(which(processed.data$`Manchester Orchestra` == "Within Range"))/ length(processed.data$`Manchester Orchestra`)),
`The Front Bottoms`= as.character(length(which(processed.data$`The Front Bottoms` == "Within Range"))/ length(processed.data$`The Front Bottoms`)))
#step 2 function
analysis <- function(feature){
#isolate feature value from allentown song
variable <- get(feature, allentown)
data <- training.csv %>%
# group together artists
group_by(artist) %>%
# create a summary of values of the feature to compare
summarise(minimum = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), 0.25, na.rm = TRUE) -1.5*(IQR(get(feature), na.rm = TRUE)),
RF = quantile(get(feature), 0.25, na.rm = TRUE) +1.5*IQR(get(feature), na.rm = TRUE),
maximum = max(get(feature)), na.rm = TRUE) %>%
# create two new rows of range distances
mutate(out.of.range = if_else(is.na(variable) | variable < minimum |
variable > maximum, TRUE, FALSE)) %>%
mutate(unusual = if_else(is.na(variable) |  variable < LF |
variable > RF, TRUE, FALSE)) %>%
rowwise() %>% #apply row by row
mutate(description = if (out.of.range) {"Out of Range"}
else if(unusual){"Unusual"}
else{"Within Range"}, na.rm = TRUE)
newRow <- data %>%
mutate(feature = feature)
# select(artist,description) %>%
# mutate(feature = feature)  %>%
# pivot_wider(values_from = "description", names_from = "artist")
return(newRow)
}
good.columns <- colnames(select_if(training.csv, is.numeric))
good.columns <- good.columns[-82]
processed.data <- good.columns[1:196] %>%
map_dfr(analysis)
processed.data %>%
select(artist,description) %>%
pivot_wider(values_from = "description", names_from = "artist")
ggplot(data=bar.data)+
geom_col(aes(x=artist, y = proportion, fill=description),
position = position_dodge(.5)) +
geom_hline(yintercept = 0)+
xlab("Artist")+
ylab("Proportion of features within range")+
ylim(0,1)+
theme_bw()
View(processed.data)
#step 2 function
analysis <- function(feature){
#isolate feature value from allentown song
variable <- get(feature, allentown)
data <- training.csv %>%
# group together artists
group_by(artist) %>%
# create a summary of values of the feature to compare
summarise(minimum = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), 0.25, na.rm = TRUE) -1.5*(IQR(get(feature), na.rm = TRUE)),
RF = quantile(get(feature), 0.25, na.rm = TRUE) +1.5*IQR(get(feature), na.rm = TRUE),
maximum = max(get(feature)), na.rm = TRUE) %>%
# create two new rows of range distances
mutate(out.of.range = if_else(is.na(variable) | variable < minimum |
variable > maximum, TRUE, FALSE)) %>%
mutate(unusual = if_else(is.na(variable) |  variable < LF |
variable > RF, TRUE, FALSE)) %>%
rowwise() %>% #apply row by row
mutate(description = if (out.of.range) {"Out of Range"}
else if(unusual){"Unusual"}
else{"Within Range"}, na.rm = TRUE)
newRow <- data %>%
select(artist,description) %>%
mutate(feature = feature)  %>%
pivot_wider(values_from = "description", names_from = "artist")
return(newRow)
}
good.columns <- colnames(select_if(training.csv, is.numeric))
good.columns <- good.columns[-82]
processed.data <- good.columns[1:196] %>%
map_dfr(analysis)
#step 2 function
analysis <- function(feature){
#isolate feature value from allentown song
variable <- get(feature, allentown)
data <- training.csv %>%
# group together artists
group_by(artist) %>%
# create a summary of values of the feature to compare
summarise(minimum = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), 0.25, na.rm = TRUE) -1.5*(IQR(get(feature), na.rm = TRUE)),
RF = quantile(get(feature), 0.25, na.rm = TRUE) +1.5*IQR(get(feature), na.rm = TRUE),
maximum = max(get(feature)), na.rm = TRUE) %>%
# create two new rows of range distances
mutate(out.of.range = if_else(is.na(variable) | variable < minimum |
variable > maximum, TRUE, FALSE)) %>%
mutate(unusual = if_else(is.na(variable) |  variable < LF |
variable > RF, TRUE, FALSE)) %>%
rowwise() %>% #apply row by row
mutate(description = if (out.of.range) {"Out of Range"}
else if(unusual){"Unusual"}
else{"Within Range"}, na.rm = TRUE)
newRow <- data %>%
mutate(feature = feature)
# select(artist,description) %>%
# mutate(feature = feature)  %>%
# pivot_wider(values_from = "description", names_from = "artist")
return(newRow)
}
good.columns <- colnames(select_if(training.csv, is.numeric))
good.columns <- good.columns[-82]
processed.data <- good.columns[1:196] %>%
map_dfr(analysis)
bar.data <- processed.data |>
add_row(feature = "proportion",`All Get Out` = as.character(length(which(processed.data$`All Get Out` == "Within Range"))/ length(processed.data$`All Get Out`)),
`Manchester Orchestra` = as.character(length(which(processed.data$`Manchester Orchestra` == "Within Range"))/ length(processed.data$`Manchester Orchestra`)),
`The Front Bottoms`= as.character(length(which(processed.data$`The Front Bottoms` == "Within Range"))/ length(processed.data$`The Front Bottoms`)))
bar.data <- processed.data |>
group_by(artist)
bar.data <- processed.data %>%
group_by(artist)
bar.data <- processed.data %>%
group_by(artist) %>%
summarise(count = n())
view(processed.data)
dim(processed.data)
bar.data <- processed.data %>%
group_by(artist) %>%
summarise(count = n(), ratio = select("Within Range")) %>%
column.plot <- ggplot(data=bar.data)+
geom_col(aes(x=artist, y = proportion, fill=description),
position = position_dodge(.5)) +
geom_hline(yintercept = 0)+
xlab("Artist")+
ylab("Proportion of features within range")+
ylim(0,1)+
theme_bw()
View(processed.data)
View(processed.data)
bar.data <- processed.data %>%
group_by(artist) %>%
summarise(count = n(), ratio = filter("Within Range")) %>%
column.plot <- ggplot(data=bar.data)+
geom_col(aes(x=artist, y = proportion, fill=description),
position = position_dodge(.5)) +
geom_hline(yintercept = 0)+
xlab("Artist")+
ylab("Proportion of features within range")+
ylim(0,1)+
theme_bw()
bar.data <- processed.data %>%
group_by(artist) %>%
summarise(count = n(), ratio = which(description == "Within Range")) %>%
column.plot <- ggplot(data=bar.data)+
geom_col(aes(x=artist, y = proportion, fill=description),
position = position_dodge(.5)) +
geom_hline(yintercept = 0)+
xlab("Artist")+
ylab("Proportion of features within range")+
ylim(0,1)+
theme_bw()
bar.data <- processed.data %>%
group_by(artist) %>%
summarise(count = n(), ratio = which(description == "Within Range")) %>%
column.plot <- ggplot(data=bar.data)+
geom_col(aes(x=artist, y = proportion, fill=description),
position = position_dodge(.5)) +
geom_hline(yintercept = 0)+
xlab("Artist")+
ylab("Proportion of features within range")+
ylim(0,1)+
theme_bw()
bar.data <- processed.data %>%
group_by(artist) %>%
summarise(count = n(), ratio = which(description == "Within Range"))
bar.data <- processed.data %>%
group_by(artist) %>%
summarise(count = n(), ratio = length(which(description == "Within Range")))
bar.data <- processed.data %>%
group_by(artist) %>%
summarise(proportion = length(which(description == "Within Range"))/ n())
column.plot <- ggplot(data=bar.data)+
geom_col(aes(x=artist, y = proportion, fill=artist),
position = position_dodge(.5)) +
geom_hline(yintercept = 0)+
xlab("Artist")+
ylab("Proportion of features within range")+
ylim(0,1)+
theme_bw()
column.plot <- ggplot(data=bar.data)+
geom_col(aes(x=artist, y = proportion),
position = position_dodge(.5)) +
geom_hline(yintercept = 0)+
xlab("Artist")+
ylab("Proportion of features within range")+
ylim(0,1)+
theme_bw()
ggplot(data=bar.data)+
geom_col(aes(x=artist, y = proportion),
position = position_dodge(.5)) +
geom_hline(yintercept = 0)+
xlab("Artist")+
ylab("Proportion of features within range")+
ylim(0,1)+
theme_bw()
source("~/Desktop/2024-25/MATH 240/lab-5-summarizing-and-graphing-data-in-r-Andrew-dev1/ali-lab5.R", echo=TRUE)
ggplot(data=bar.data)+
geom_col(aes(x=artist, y = proportion, fill=artist),
position = position_dodge(.5)) +
geom_hline(yintercept = 0)+
xlab("Artist")+
ylab("Proportion of features within range")+
ylim(0,1)+
theme_bw()
dat.pie <- training.csv |>
group_by(artist) |>
summarise(total = length(get("chords_scale")), count = length(grep("major",get("chords_scale")))) |>
mutate(proportion = count/total) #length(grep("major",get("chords_scale",allentown))) )
categorical.columns
get("key", allentown)
get("chords_key", allentown)
get("mode", allentown)
get("chords_scale", allentown)
chords_scale <- get("chords_scale", allentown)
dat.pie <- training.csv |>
group_by(artist) |>
summarise(total = length(get("chords_key")), count = length(grep("major",get("chords_key")))) |>
mutate(proportion = count/total) #length(grep("major",get("chords_scale",allentown))) )
dat.pie <- training.csv |>
group_by(artist) |>
summarise(total = length(get("chords_key")), count = length(grep(chords_key,get("chords_key")))) |>
mutate(proportion = count/total) #length(grep("major",get("chords_scale",allentown))) )
chords_scale <- get("chords_scale", allentown)
chords_key <- get("chords_key", allentown)
mode <- get("mode", allentown)
key <- get("key", allentown)
dat.pie <- training.csv |>
group_by(artist) |>
summarise(total = length(get("chords_key")), count = length(grep(chords_key,get("chords_key")))) |>
mutate(proportion = count/total) #length(grep("major",get("chords_scale",allentown))) )
dplyr::last_dplyr_warnings()
get("chords_key", allentown)
chords_key
get("chords_key", training.csv)
grep(chords_key,get("chords_key"))
grep(chords_key,get("chords_key", training.csv))
dat.pie <- training.csv |>
group_by(artist) |>
summarise(total = length(get("chords_key")), count = length(grep(chords_key,get("chords_key"))))
length(get("chords_key"), training.csv)
length(get("chords_key", training.csv))
dat.pie <- training.csv |>
group_by(artist) |>
summarise(total = length(get("chords_scale")), count = length(grep(chords_scale,get("chords_scale")))) |>
mutate(proportion = count/total)
chords_key
mode
key
dat.pie <- training.csv |>
group_by(artist) |>
summarise(total = length(get("chords_scale")), count = length(grep("major",get("chords_scale")))) |>
mutate(proportion = count/total) #length(grep("major",get("chords_scale",allentown))) )
#pie charts
dat.pie <- training.csv |>
group_by(artist) |>
summarise(total = length(get("chords_key")), count = length(grep("C",get("chords_key")))) |>
mutate(proportion = count/total) #length(grep("major",get("chords_scale",allentown))) )
dat.pie <- training.csv |>
group_by(artist) |>
summarise(total = length(get("mode")), count = length(grep("major",get("mode")))) |>
mutate(proportion = count/total) #length(grep("major",get("chords_scale",allentown))) )
dat.pie <- training.csv |>
group_by(artist) |>
summarise(total = length(get("key")), count = length(grep("FALSE",get("key")))) |>
mutate(proportion = count/total) #length(grep("major",get("chords_scale",allentown))) )
dat.pie <- training.csv |>
group_by(artist) |>
summarise(total = length(get("chords_scale")), count = length(grep("major",get("chords_scale")))) |>
mutate(proportion = count/total)
View(dat.pie)
